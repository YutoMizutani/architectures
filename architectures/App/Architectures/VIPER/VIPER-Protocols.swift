//
//  VIPER-Protocols.swift
//  architectures
//
//  Created YutoMizutani on 2018/06/06.
//  Copyright © 2018 Yuto Mizutani. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation

//MARK: Wireframe -
protocol VIPERWireframeProtocol: class {

}
//MARK: Presenter -
protocol VIPERPresenterProtocol: class {

    var interactor: VIPERInteractorInputProtocol? { get set }

    func fetch()
    func transfer()
    func reset()
}

//MARK: Interactor -
protocol VIPERInteractorOutputProtocol: class {

    /* Interactor -> Presenter */

    func throwError(_ error: Error)
    func updateBalance(_ users: (from: VIPEREntity, to: VIPEREntity))
}

protocol VIPERInteractorInputProtocol: class {

    var presenter: VIPERInteractorOutputProtocol?  { get set }

    /* Presenter -> Interactor */

    func fetchEntity() throws -> [VIPEREntity]
    func reset(_ collections: [VIPEREntity]) -> [VIPEREntity]
    func commit(_ collections: [VIPEREntity])
    func credit(_ to: VIPEREntity, amount: Int) throws -> VIPEREntity
    func debit(_ from: VIPEREntity, amount: Int) throws -> VIPEREntity
}

//MARK: View -
protocol VIPERViewProtocol: class {

    var presenter: VIPERPresenterProtocol?  { get set }

    /* Presenter -> ViewController */

    func updateLabel(_ users: (from: VIPEREntity, to: VIPEREntity))
    func presentAlert(error: Error)
}
