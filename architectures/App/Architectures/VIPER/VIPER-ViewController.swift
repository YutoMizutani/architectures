//
//  VIPER-ViewController.swift
//  architectures
//
//  Created YutoMizutani on 2018/06/06.
//  Copyright © 2018 Yuto Mizutani. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

/*
 
 View (ViewController)
     VIPER View は、コーディングにより実装されたプログラムやIB(インターフェースビルダー)を使って出来たサブビューを含むiOSアプリのUIVIewControllerです。

     それの唯一の責務は、Presenterから教わったとおりに表示する事や、UI(ユーザーインターフェイス)を操作することです。
     Userからの任意のイベントをトリガーとし、必要な処理をし、Viewは簡単なDelegateでPresenterと処理待ちに表示が次に必要か教えます。

 [iOS Project Architecture : Using VIPER [和訳]](https://qiita.com/YKEI_mrn/items/67735d8ebc9a83fffd29)より

 */

import UIKit

class VIPERViewController: UIViewController {
	var presenter: VIPERPresenterProtocol?
    var subview: View!
}

extension VIPERViewController {
    override func viewDidLoad() {
        super.viewDidLoad()

        configureView()
        layoutView()
        addAction()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        self.presenter?.fetch()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()

        layoutView()

        self.view.layoutIfNeeded()
    }

    override func viewSafeAreaInsetsDidChange() {
        super.viewSafeAreaInsetsDidChange()

        layoutView()
    }
}

// MARK:- Private methods about settings
extension VIPERViewController {
    /// Viewの構成を行う。
    private func configureView() {
        // Viewを作成する。
        self.subview = MVCView()

        // Viewに追加する。
        self.view.addSubview(self.subview)
    }

    /// Viewの更新を行う。
    private func layoutView() {
        // subviewのサイズを更新する。
        self.subview.frame = self.view.frame
    }

    private func addAction() {
        self.subview.transferButton.addTarget(self, action: #selector(self.transfer), for: .touchUpInside)
        self.subview.resetButton.addTarget(self, action: #selector(self.reset), for: .touchUpInside)
    }
}

extension VIPERViewController {
    /// 送金を行う
    @IBAction func transfer() {
        self.presenter?.transfer()
    }

    /// リセットを行う
    @IBAction func reset() {
        self.presenter?.reset()
    }
}

// MARK:- Public methods accessed from other classes
extension VIPERViewController: VIPERViewProtocol, ErrorShowable {
    /// ラベルの内容を更新する。
    public func updateLabel(_ users: (from: VIPEREntity, to: VIPEREntity)) {
        DispatchQueue.main.async {
            self.subview.toView.nameLabel.text = "\(users.from.user.rawValue): "
            self.subview.fromView.valueLabel.text = "\(users.from.balance)"
            self.subview.fromView.nameLabel.text = "\(users.to.user.rawValue): "
            self.subview.toView.valueLabel.text = "\(users.to.balance)"
        }
    }

    /// アラートを表示する。
    public func presentAlert(error: Error) {
        self.showAlert(error: error)
    }
}
